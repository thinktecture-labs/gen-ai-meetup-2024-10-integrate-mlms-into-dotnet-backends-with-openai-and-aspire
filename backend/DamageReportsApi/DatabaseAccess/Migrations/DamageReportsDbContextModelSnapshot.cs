// <auto-generated />
using System;
using DamageReportsApi.DatabaseAccess;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace DamageReportsApi.DatabaseAccess.Migrations
{
    [DbContext(typeof(DamageReportsDbContext))]
    partial class DamageReportsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DamageReportsApi.DatabaseAccess.Model.DamageReport", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<int>("AccidentType")
                        .HasColumnType("integer");

                    b.Property<string>("CarColor")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CarType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("character varying(2)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateOfAccidentUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("FrontBumper")
                        .HasColumnType("integer");

                    b.Property<int>("FrontLeftDoor")
                        .HasColumnType("integer");

                    b.Property<int>("FrontLeftFender")
                        .HasColumnType("integer");

                    b.Property<int>("FrontLeftWheel")
                        .HasColumnType("integer");

                    b.Property<int>("FrontLeftWindow")
                        .HasColumnType("integer");

                    b.Property<int>("FrontRightDoor")
                        .HasColumnType("integer");

                    b.Property<int>("FrontRightFender")
                        .HasColumnType("integer");

                    b.Property<int>("FrontRightWheel")
                        .HasColumnType("integer");

                    b.Property<int>("FrontRightWindow")
                        .HasColumnType("integer");

                    b.Property<int>("Grille")
                        .HasColumnType("integer");

                    b.Property<int>("Hood")
                        .HasColumnType("integer");

                    b.Property<string>("InsuranceId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("LeftExteriorTrim")
                        .HasColumnType("integer");

                    b.Property<int>("LeftHeadlights")
                        .HasColumnType("integer");

                    b.Property<int>("LeftSideMirror")
                        .HasColumnType("integer");

                    b.Property<int>("LeftTaillights")
                        .HasColumnType("integer");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RearBumper")
                        .HasColumnType("integer");

                    b.Property<int>("RearLeftDoor")
                        .HasColumnType("integer");

                    b.Property<int>("RearLeftFender")
                        .HasColumnType("integer");

                    b.Property<int>("RearLeftWheel")
                        .HasColumnType("integer");

                    b.Property<int>("RearLeftWindow")
                        .HasColumnType("integer");

                    b.Property<int>("RearRightDoor")
                        .HasColumnType("integer");

                    b.Property<int>("RearRightFender")
                        .HasColumnType("integer");

                    b.Property<int>("RearRightWheel")
                        .HasColumnType("integer");

                    b.Property<int>("RearRightWindow")
                        .HasColumnType("integer");

                    b.Property<int>("RearWindshield")
                        .HasColumnType("integer");

                    b.Property<string>("ReasonOfTravel")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("RightExteriorTrim")
                        .HasColumnType("integer");

                    b.Property<int>("RightHeadlights")
                        .HasColumnType("integer");

                    b.Property<int>("RightSideMirror")
                        .HasColumnType("integer");

                    b.Property<int>("RightTaillights")
                        .HasColumnType("integer");

                    b.Property<int>("Roof")
                        .HasColumnType("integer");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Telephone")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)");

                    b.Property<int>("TrunkLid")
                        .HasColumnType("integer");

                    b.Property<int>("Windshield")
                        .HasColumnType("integer");

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("character varying(10)");

                    b.HasKey("Id");

                    b.ToTable("DamageReports");
                });

            modelBuilder.Entity("DamageReportsApi.DatabaseAccess.Model.OtherPartyContact", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DamageReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DamageReportId")
                        .IsUnique();

                    b.ToTable("OtherPartyContacts");
                });

            modelBuilder.Entity("DamageReportsApi.DatabaseAccess.Model.Passenger", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<Guid>("DamageReportId")
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.HasKey("Id");

                    b.HasIndex("DamageReportId");

                    b.ToTable("Passengers");
                });

            modelBuilder.Entity("DamageReportsApi.DatabaseAccess.Model.OtherPartyContact", b =>
                {
                    b.HasOne("DamageReportsApi.DatabaseAccess.Model.DamageReport", "DamageReport")
                        .WithOne("OtherPartyContact")
                        .HasForeignKey("DamageReportsApi.DatabaseAccess.Model.OtherPartyContact", "DamageReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageReport");
                });

            modelBuilder.Entity("DamageReportsApi.DatabaseAccess.Model.Passenger", b =>
                {
                    b.HasOne("DamageReportsApi.DatabaseAccess.Model.DamageReport", "DamageReport")
                        .WithMany("Passengers")
                        .HasForeignKey("DamageReportId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DamageReport");
                });

            modelBuilder.Entity("DamageReportsApi.DatabaseAccess.Model.DamageReport", b =>
                {
                    b.Navigation("OtherPartyContact");

                    b.Navigation("Passengers");
                });
#pragma warning restore 612, 618
        }
    }
}
